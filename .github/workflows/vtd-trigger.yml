name: vtd trigger

on:
  repository_dispatch:
    types:
      - vtd-trigger
      - refs/remotes/**

env:
  # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  # TELEGRAM_GROUP_ID: ${{ vars.TELEGRAM_GROUP_ID}}
  # TELEGRAM_TOPIC_ID: ${{ vars.TELEGRAM_TOPIC_ID}}
  REF_NAME: ${{ github.event.client_payload.ref_name}}
  TRIGGERING_ACTOR: ${{ github.event.client_payload.triggering_actor}}

jobs:
  build-and-check:
    name: ${{ matrix.name }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.target-branch.outputs.value == 'main' && 'dev' || 'stg' }}
    strategy:
      matrix:
        include: ${{ fromJson(vars.STRATEGY_MATRIX_SERVICES) }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.VTD_REPOSITORY_SOURCE }}
          token: ${{ secrets.GH_PAT }}
          ref: ${{ env.REF_NAME }}
          path: source

      - name: Check target source
        id: target-branch
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          HASH_REF=$(git ls-remote --heads --quiet --exit-code https://${{ secrets.GH_PAT }}@github.com/${{ secrets.VTD_REPOSITORY_TARGET }}${{ matrix.service }}.git ${{ env.REF_NAME }})
          if [ -z "${HASH_REF}" ]; then
            echo "value=main" >> $GITHUB_OUTPUT
          else
            echo "value=${{ env.REF_NAME }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout target
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.VTD_REPOSITORY_TARGET }}${{ matrix.service }}
          token: ${{ secrets.GH_PAT }}
          ref: ${{ steps.target-branch.outputs.value }}
          path: target

      - name: Switch branch
        if: steps.target-branch.outputs.value == 'main'
        working-directory: target
        run: |
          git branch --delete -D ${{ env.REF_NAME }} || echo 'done!!!'
          git fetch --all --quiet
          git switch -c ${{ env.REF_NAME }} || echo 'already!!!'
          git reset --hard ${{ env.REF_NAME }}
          git pull origin ${{ env.REF_NAME }}

      - name: Setup java 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Remove the rest code
        run: |
          mkdir code_temp
          mv -v source/${{ secrets.SERVICE_PACKAGE_PATH }}/* code_temp
          mv code_temp/main source/${{ secrets.SERVICE_PACKAGE_PATH }}/
          mv code_temp/auth source/${{ secrets.SERVICE_PACKAGE_PATH }}/
          mv code_temp/Application.java source/${{ secrets.SERVICE_PACKAGE_PATH }}/
          mv code_temp/ConfigProperties.java source/${{ secrets.SERVICE_PACKAGE_PATH }}/
          mv code_temp/${{ matrix.service }} source/${{ secrets.SERVICE_PACKAGE_PATH }}/

      - name: Remove the rest overlays
        run: |
          mkdir overlay_temp
          mv -v source/overlays/* overlay_temp
          mv overlay_temp/${{ matrix.service }} source/overlays/
      
      - name: Change server.servlet.context-path
        working-directory: source
        run: perl -i -pe "s/^server.servlet.context-path=\/api/'server.servlet.context-path=${{ matrix.path }}'/e" src/main/resources/application.properties
        
      - name: Build and package project
        working-directory: source
        run: |
          echo "${{ secrets.ENV_PROPERTIES }}" > src/main/resources/application-dev-base64.properties
          cat src/main/resources/application-dev-base64.properties | base64 -d > src/main/resources/application-dev.properties
          mvn -f pom.xml clean install package -q

      - name: Move code to the result
        run: |
          mkdir result
          mv target/.git result/
          rm -rf source/.git
          shopt -s dotglob
          mv -v source/* result/

      - name: Check changes
        working-directory: result
        id: is-change-code
        run: |
          if [[ `git status --porcelain` ]]; then
            echo "value=true" >> $GITHUB_OUTPUT
          else
            echo "value=false" >> $GITHUB_OUTPUT
          fi

      - name: Push result
        if: steps.is-change-code.outputs.value == 'true'
        working-directory: result
        run: |
          git config user.name "GitHub Actions" --local
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" --local
          git add -A
          git diff-index --quiet HEAD || git commit -m ':white_check_mark: update code'
          git push origin ${{ env.REF_NAME }} -f

      - name: Trigger build ${{ matrix.service }}
        if: steps.is-change-code.outputs.value == 'true'
        working-directory: result
        run: |
          TRIGGERING_ACTOR=${{ env.TRIGGERING_ACTOR }}
          TRIGGERING_REF=${{ env.REF_NAME }}
          TRIGGERING_SERVICE_NAME=${{ matrix.service }}
          TRIGGERING_REPOSITORY=${{ secrets.VTD_REPOSITORY_TARGET }}${{ matrix.service }}
          TRIGGERING_ENV=${{ steps.target-branch.outputs.value == 'main' && 'dev' || 'stg' }}
          TRIGHERING_VERSION=$(git rev-parse HEAD)
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.LIBERTY_PPAP_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/VitaDairy/vtd-be-ppap/dispatches \
            -d "{ \
                \"event_type\": \"vtd-be-java-${{ matrix.service }}/refs/remotes/$TRIGGERING_REF~$TRIGGERING_ACTOR\", \
                \"client_payload\": { \
                  \"triggering_actor\": \"$TRIGGERING_ACTOR\", \
                  \"triggering_ref\": \"$TRIGGERING_REF\", \
                  \"triggering_service_name\": \"$TRIGGERING_SERVICE_NAME\", \
                  \"triggering_repo\": \"$TRIGGERING_REPOSITORY\", \
                  \"triggering_env\": \"$TRIGGERING_ENV\", \
                  \"triggering_version\": \"$TRIGHERING_VERSION\" \
                } \
              }"

  build_swagger:
    permissions:
      contents: write
    name: "Swagger docs generated"
    needs: [build-and-check]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.VTD_REPOSITORY_SOURCE }}
        token: ${{ secrets.GH_PAT }}
        ref: ${{ env.REF_NAME }}
        path: source
    
    - name: Setup java 21
      uses: actions/setup-java@v4
      with:
        distribution: "temurin"
        java-version: "21"

    - name: Build and package project
      working-directory: source
      run: |
        echo "${{ secrets.ENV_PROPERTIES }}" > src/main/resources/application-dev-base64.properties
        cat src/main/resources/application-dev-base64.properties | base64 -d > src/main/resources/application-dev.properties
        mvn -f pom.xml  clean install package -DskipTests -q
        # mvn -f pom.xml clean test -q
    
    - name: Generate Swagger UI
      uses: Legion2/swagger-ui-action@v1
      with:
        output: swagger-ui/${{ needs.build-and-check.outputs.env }}
        spec-file: source/target/generated-sources/swagger.json
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: swagger-ui